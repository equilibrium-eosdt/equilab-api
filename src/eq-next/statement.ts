import { u8aToHex } from "@polkadot/util";
import { decodeAddress } from "@polkadot/util-crypto";

const testPrefix = "Pay TEST EQ to the TEST account:";

const testSuffixBuf = Buffer.from([
  73,
  32,
  104,
  101,
  114,
  101,
  98,
  121,
  32,
  97,
  103,
  114,
  101,
  101,
  32,
  116,
  111,
  32,
  116,
  104,
  101,
  32,
  116,
  101,
  114,
  109,
  115,
  32,
  111,
  102,
  32,
  116,
  104,
  101,
  32,
  115,
  116,
  97,
  116,
  101,
  109,
  101,
  110,
  116,
  32,
  119,
  104,
  111,
  115,
  101,
  32,
  83,
  72,
  65,
  45,
  50,
  53,
  54,
  32,
  104,
  97,
  115,
  104,
  32,
  105,
  115,
  32,
  99,
  48,
  57,
  97,
  57,
  55,
  97,
  99,
  53,
  57,
  54,
  55,
  101,
  49,
  53,
  57,
  55,
  49,
  57,
  101,
  51,
  55,
  57,
  56,
  99,
  49,
  100,
  55,
  55,
  101,
  52,
  48,
  49,
  98,
  54,
  49,
  99,
  53,
  57,
  101,
  50,
  55,
  51,
  53,
  56,
  57,
  55,
  99,
  99,
  102,
  101,
  52,
  100,
  57,
  102,
  54,
  102,
  57,
  99,
  52,
  97,
  56,
  98,
  50,
  46,
  32,
  40,
  84,
  104,
  105,
  115,
  32,
  109,
  97,
  121,
  32,
  98,
  101,
  32,
  102,
  111,
  117,
  110,
  100,
  32,
  97,
  116,
  32,
  116,
  104,
  101,
  32,
  85,
  82,
  76,
  58,
  32,
  104,
  116,
  116,
  112,
  115,
  58,
  47,
  47,
  101,
  113,
  117,
  105,
  108,
  105,
  98,
  114,
  105,
  117,
  109,
  46,
  105,
  111,
  47,
  116,
  111,
  107,
  101,
  110,
  115,
  119,
  97,
  112,
  47,
  100,
  111,
  99,
  115,
  47,
  116,
  111,
  107,
  101,
  110,
  95,
  115,
  119,
  97,
  112,
  95,
  116,
  38,
  99,
  115,
  46,
  112,
  100,
  102,
  41,
]);

const prefix = "Pay EQ to the account:";

const suffixBuf = Buffer.from([
  73,
  32,
  104,
  101,
  114,
  101,
  98,
  121,
  32,
  97,
  103,
  114,
  101,
  101,
  32,
  116,
  111,
  32,
  116,
  104,
  101,
  32,
  116,
  101,
  114,
  109,
  115,
  32,
  111,
  102,
  32,
  116,
  104,
  101,
  32,
  115,
  116,
  97,
  116,
  101,
  109,
  101,
  110,
  116,
  32,
  119,
  104,
  111,
  115,
  101,
  32,
  83,
  72,
  65,
  45,
  50,
  53,
  54,
  32,
  104,
  97,
  115,
  104,
  32,
  105,
  115,
  32,
  99,
  48,
  57,
  97,
  57,
  55,
  97,
  99,
  53,
  57,
  54,
  55,
  101,
  49,
  53,
  57,
  55,
  49,
  57,
  101,
  51,
  55,
  57,
  56,
  99,
  49,
  100,
  55,
  55,
  101,
  52,
  48,
  49,
  98,
  54,
  49,
  99,
  53,
  57,
  101,
  50,
  55,
  51,
  53,
  56,
  57,
  55,
  99,
  99,
  102,
  101,
  52,
  100,
  57,
  102,
  54,
  102,
  57,
  99,
  52,
  97,
  56,
  98,
  50,
  46,
  32,
  40,
  84,
  104,
  105,
  115,
  32,
  109,
  97,
  121,
  32,
  98,
  101,
  32,
  102,
  111,
  117,
  110,
  100,
  32,
  97,
  116,
  32,
  116,
  104,
  101,
  32,
  85,
  82,
  76,
  58,
  32,
  104,
  116,
  116,
  112,
  115,
  58,
  47,
  47,
  101,
  113,
  117,
  105,
  108,
  105,
  98,
  114,
  105,
  117,
  109,
  46,
  105,
  111,
  47,
  116,
  111,
  107,
  101,
  110,
  115,
  119,
  97,
  112,
  47,
  100,
  111,
  99,
  115,
  47,
  116,
  111,
  107,
  101,
  110,
  95,
  115,
  119,
  97,
  112,
  95,
  116,
  38,
  99,
  115,
  46,
  112,
  100,
  102,
  41,
]);

export const TEST_STATEMENT = testSuffixBuf.toString("utf8");
export const STATEMENT = suffixBuf.toString("utf8");

export const getSigMessage = (
  test: boolean,
  address: string,
  stamenent: boolean = false,
) => {
  const prfx = test ? testPrefix : prefix;
  const stmt = test ? TEST_STATEMENT : STATEMENT;
  let message = prfx + u8aToHex(decodeAddress(address), -1, false);

  if (stamenent) {
    message += stmt;
  }

  return message;
};
